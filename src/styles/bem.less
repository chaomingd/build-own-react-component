@prefix: sp;


.b(@block, @content) {
  .@{prefix}-@{block} {
    @b: @block;
    @content();
  }
}

.e(@element, @content) {
  &__@{element} {
    @e: @element;
    @be: ~'@{b}__@{e}';
    @content();
  }
}

.m(@modifer, @content) {
  &--@{modifer} {
    @m: @modifer;
    @bem: ~'@{be}--@{m}';
    @bm: ~'@{b}--@{m}';
    @content();
  }
}

// mixin.less
.cssVar(@block, @rule, @type: '') {
  & {
    each(@rule, {
      // 去除变量定义 @xx: val;
      .css() when((replace(@key, '@', '') = @key)) {
        @{key}: if(@type = '', ~"var(--@{prefix}-@{block}-@{key}, @{value})", ~"var(--@{prefix}-@{block}-@{key}-@{type}, @{value})");
      }
      .css();
    })
  }
}

// 伪类
.psd(@type: '', @content) {
  &:@{type} {
    @tp: @type;
    @content();
  }
}

// 伪元素
.psde(@type: '', @content) {
  &::@{type} {
    @tp: @type;
    @content();
  }
}


.b(form, {
  .cssVar(@b, {
    font-size: 10px;
  });
  .e(item, {
    .cssVar(@be, {
      font-size: 14px;
      color: #000;
    });
    overflow: hidden;
    .m(error, {
      .cssVar(@bem, {
        color: red;
      });
    });
  });
  .e(button, {
    .cssVar(@be, {
      font-size: 10px;
    })
  });
});

// 输出
.sp-form {
  font-size: var(--sp-form-font-size, 10px);
}
.sp-form__item {
  font-size: var(--sp-form__item-font-size, 14px);
  color: var(--sp-form__item-color, #000);
  overflow: hidden;
}
.sp-form__item--error {
  color: var(--sp-form__item--error-color, red);
}
.sp-form__button {
  font-size: var(--sp-form__button-font-size, 10px);
}